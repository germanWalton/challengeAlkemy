{
  "openapi": "3.0.1",
  "info": {
    "title": "Disney Api",
    "description": "Develop an API to explore the world of Disney, which will allow knowing and modifying the characters that compose it and understand in which films they participated. On the other hand, you must expose the information so that any frontend can consume it.  For this sample, you can use the api JWT `special-key` to test the authorization endpoints. You have to go to the register endpoint and then go to login. Now you can paste the generate token into the url that you want test.",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "waltongerman@gmail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://disney-alkemy-api.herokuapp.com/"
    },
    {
      "url": "http://disney-alkemy-api.herokuapp.com/"
    }
  ],
  "tags": [
    {
      "name": "character",
      "description": "Character operations"
    },
    {
      "name": "movie",
      "description": "Movie operations"
    },
    {
      "name": "user",
      "description": "Operations about user"
    },
    {
      "name": "auth",
      "description": "Login and register operations"
    }
  ],
  "paths": {
    "/characters": {
      "get": {
        "tags": [
          "character"
        ],
        "summary": "Get all the characters",
        "operationId": "getCharacters",
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "required": false,
            "description": "Filter by name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "age",
            "required": false,
            "description": "Filter by age",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "weight",
            "required": false,
            "description": "Filter by weight",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Character"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "character"
        ],
        "summary": "Add a new character to the Database",
        "operationId": "addCharacter",
        "requestBody": {
          "description": "Character object that needs to be added to the DB",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Character"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Operation successful",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body",
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/characters/{characterId}": {
      "get": {
        "tags": [
          "character"
        ],
        "summary": "Find character by ID",
        "description": "Returns a single character",
        "operationId": "getCharacterById",
        "parameters": [
          {
            "name": "characterId",
            "in": "path",
            "description": "ID of character to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Character"
                }
              }
            }
          },
          "404": {
            "description": "Character not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "character"
        ],
        "summary": "Update a character",
        "description": "Update a character by his Id.",
        "operationId": "updateCharacter",
        "parameters": [
          {
            "name": "characterId",
            "in": "path",
            "description": "Id of the character that need to be updated",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Updated character object",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/Character"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Operation successful",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body",
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "character"
        ],
        "summary": "Deletes a character",
        "operationId": "deleteCharacter",
        "parameters": [
          {
            "name": "characterId",
            "in": "path",
            "description": "Character id to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful",
            "content": {}
          },
          "404": {
            "description": "Character not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/movies": {
      "get": {
        "tags": [
          "movie"
        ],
        "summary": "Find all movies",
        "operationId": "findAllMovies",
        "parameters": [
          {
            "in": "query",
            "name": "title",
            "required": false,
            "description": "Filter by title",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "genderId",
            "required": false,
            "description": "Filter by gender",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "description": "Order by creation date ASC or DESC",
            "schema": {
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Movie"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "movie"
        ],
        "summary": "Add a new movie to the Database",
        "operationId": "addMovie",
        "requestBody": {
          "description": "Movie object that needs to be added to the DB",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Movie"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Operation successful",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body",
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/movies/{movieId}": {
      "get": {
        "tags": [
          "movie"
        ],
        "summary": "Find a movie by ID",
        "description": "Returns a single movie",
        "operationId": "getMovieById",
        "parameters": [
          {
            "name": "movieId",
            "in": "path",
            "description": "ID of movie to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Character"
                }
              }
            }
          },
          "404": {
            "description": "Movie not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "movie"
        ],
        "summary": "Update a movie",
        "description": "Update a movie by his Id.",
        "operationId": "updateMovie",
        "parameters": [
          {
            "name": "movieId",
            "in": "path",
            "description": "Id of the movie that need to be updated",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Updated movie object",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/Movie"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "movie"
        ],
        "summary": "Deletes a movie",
        "operationId": "deleteMovie",
        "parameters": [
          {
            "name": "movieId",
            "in": "path",
            "description": "Movie id to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful",
            "content": {}
          },
          "404": {
            "description": "Movie not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/movies/{movieId}/characters/{characterId}": {
      "put": {
        "tags": [
          "movie"
        ],
        "summary": "Associate a movie with a character",
        "operationId": "associateMovieCharacter",
        "parameters": [
          {
            "name": "movieId",
            "in": "path",
            "description": "Id of the movie that needs to be associate",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "characterId",
            "in": "path",
            "description": "Id of the character that needs to be associate",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Find all users",
        "operationId": "findAllUsers",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create a user",
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "requestBody": {
          "description": "Created user object",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Operation successful",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/users/{userId}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Find user by ID",
        "description": "Returns a single user",
        "operationId": "getUserById",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of user to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Update a user",
        "description": "Update a user by his Id.",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user that needs to be updated",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Updated user object",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Operation successful",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete a user",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Logs user into the system",
        "requestBody": {
          "description": "Username and password",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "example@gmail.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "password"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "400": {
            "description": "User does not exist",
            "content": {}
          },
          "401": {
            "description": "Invalid password",
            "content": {}
          }
        }
      }
    },
    "/auth/register": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Register an user into the system",
        "operationId": "registerUser",
        "requestBody": {
          "description": "The object to register an user",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "example@gmail.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "password"
                  },
                  "name": {
                    "type": "string",
                    "example": "Juan"
                  },
                  "enable": {
                    "type": "boolean",
                    "default": true
                  },
                  "isAdmin": {
                    "type": "boolean",
                    "default": false
                    
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "Character": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "image": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "age": {
            "type": "integer",
            "format": "int64"
          },
          "weight": {
            "type": "integer",
            "format": "int64"
          },
          "history": {
            "type": "string"
          }
        },
        "xml": {
          "name": "Character"
        }
      },
      "Movie": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "image": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "creationDate": {
            "type": "string"
          },
          "score": {
            "type": "number"
          }
        },
        "xml": {
          "name": "Movie"
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "enable": {
            "type": "boolean"
          },
          "isAdmin": {
            "type": "boolean",
            "default": false
           
          }
        },
        "xml": {
          "name": "User"
        }
      },
      "Gender": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "image": {
            "type": "string"
          }
        },
        "xml": {
          "name": "Gender"
        }
      }
    }
  }
}